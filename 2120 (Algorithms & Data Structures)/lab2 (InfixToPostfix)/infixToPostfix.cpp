/*
 * Name:
 * Date Submitted:
 * Lab Section:
 * Assignment Name:
 */

#include <string>
#include <stack>
#include <cctype>
#include <iostream>

using namespace std;

//Converts an infix arithmetic expression into postfix
//The function takes 3 parameters
//First parameter: array of strings for infix expression
//    each string is either an integer number or operator symbol
//Second parameter: number of strings in infix expression
//Third parameter: array of strings for postfix expression
//    generated by function, same format as first parameter
//    assumes that postfix is at least the size of postfix
//Return value: int, number of strings in postfix expression
//    Returns 0 if an error is encountered when converting expression
//    An error occurs with a mismatched parenthesis, e.g. ( ( ) or ( ) ) etc.
//Operator symbols:
// ( : left parenthesis, all operations between this and ")" take place first
// ) : right parenthesis, all op.s back to previous "(" take place first
// * : multiplication, higher precedence - takes place before "+" and "-"
// / : division, higher precedence - takes place before "+" and "-"
// % : remainder, higher precedence - takes place before "+" and "-"
// + : addition, lower precedence - takes place after "*" , "/" , "%"
// - : subtraction, lower precedence - takes place after "*" , "/" , "%"
//The function is not specified to work with any other operator symbols
//Any string in infix may be assumed to be an integer operand if none
// of the above symbols
bool higherPrecendenceCheck(string cur, string top)
{
  if ((top.compare("+") == 0) || (top.compare("-") == 0))
    {
      if ((cur.compare("%") == 0) || (cur.compare("/") == 0) || (cur.compare("*") == 0))
	{
	  return true;
	}
    }
  if (cur.compare(")") == 0)
    {
      return true;
    }
  return false;
}

int infixToPostfix(string infix[], int length, string postfix[])
{
  stack<string> operatorStack;
  int curPostfix = 0;
  string curOperator;
  for (int i=0; i<length; i++)
    {
      if (isdigit(infix[i][0]))
	{
	  postfix[curPostfix] = infix[i];
	  curPostfix++;
	}
      else
	{
	  curOperator = infix[i];
	  cout<<curOperator<<endl;
	  
	  if (operatorStack.empty())
	    {
	      cout<<"1"<<endl;
	      operatorStack.push(curOperator);
	    }
	  else if(higherPrecendenceCheck(curOperator, operatorStack.top()))
	    {
	      cout<<"2"<<endl;
	      if (isdigit(infix[i+1][0]))
		{
		  i++;
		  postfix[curPostfix] = infix[i];
		  curPostfix++;
		}
	      while(!operatorStack.empty() && (curOperator.compare("(") != 0))
	        {
		  int sentinel = 0;
		  if (curOperator.compare(")") != 0)
		    {
		      postfix[curPostfix] = curOperator;
		      curPostfix++;
		    }
		  else
		    {
		      sentinel = 1;
		    }
		  
		  curOperator = operatorStack.top();
		  operatorStack.pop();
		  
		  if (operatorStack.empty() && sentinel == 0)
		    {
		      postfix[curPostfix] = curOperator;
                      curPostfix++;
		    }
		}
	    }
	  else
	    {
	      cout<<"3"<<endl;
	      operatorStack.push(curOperator);
	    }
	}
    }
  while(!operatorStack.empty())
    {
      postfix[curPostfix] = curOperator;
      curPostfix++;
      curOperator = operatorStack.top();
      operatorStack.pop();
      if (operatorStack.empty())
	{
	  postfix[curPostfix] = curOperator;
	}
    }

  return curPostfix; 
}

//Main function to test infixToPostfix()
//Should convert 2 + 3 * 4 + ( 5 - 6 + 7 ) * 8
//            to 2 3 4 * + 5 6 - 7 + 8 * +
int main()
{
    string infixExp[] = {"2", "+", "3", "*", "4", "+", "(",
                         "5", "-", "6", "*", "7", ")", "*",
                         "8"};
    string postfixExp[15];
    int postfixLength;

    cout << "Infix expression: ";
    for (int i=0; i<15; i++)
    {
        cout << infixExp[i] << " ";
    }
    cout << endl;
    cout << "Length: 15" << endl << endl;

    postfixLength = infixToPostfix(infixExp, 15, postfixExp);

    cout << "Postfix expression: ";
    for (int i=0; i<postfixLength; i++)
    {
        cout << postfixExp[i] << " ";
    }
    cout << endl;
    cout << "Length: " << postfixLength << endl;
    
    return 0;
}
