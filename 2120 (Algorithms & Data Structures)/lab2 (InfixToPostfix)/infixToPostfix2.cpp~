/*
 * Name: Noah Nisbet
 * Date Submitted: Febuary 6, 2023
 * Lab Section: 10
 * Assignment Name: Infix to Postfix conversion
 */

#include <string>
#include <stack>
#include <cctype>
#include <iostream>

using namespace std;

//Converts an infix arithmetic expression into postfix
//The function takes 3 parameters
//First parameter: array of strings for infix expression
//    each string is either an integer number or operator symbol
//Second parameter: number of strings in infix expression
//Third parameter: array of strings for postfix expression
//    generated by function, same format as first parameter
//    assumes that postfix is at least the size of postfix
//Return value: int, number of strings in postfix expression
//    Returns 0 if an error is encountered when converting expression
//    An error occurs with a mismatched parenthesis, e.g. ( ( ) or ( ) ) etc.
//Operator symbols:
// ( : left parenthesis, all operations between this and ")" take place first
// ) : right parenthesis, all op.s back to previous "(" take place first
// * : multiplication, higher precedence - takes place before "+" and "-"
// / : division, higher precedence - takes place before "+" and "-"
// % : remainder, higher precedence - takes place before "+" and "-"
// + : addition, lower precedence - takes place after "*" , "/" , "%"
// - : subtraction, lower precedence - takes place after "*" , "/" , "%"
//The function is not specified to work with any other operator symbols
//Any string in infix may be assumed to be an integer operand if none
// of the above symbols

/* ------------------------------------------------------
 * This function is used for controlling which operators are popped 
 * to the postfix expression.
 * 
 * If the current operator is +- and the top of the operatorStack is +-%/*
 * keep adding operators to the postfix expression
 * 
 * If the current operator is * / % and the top of the operatorStack is also 
 * * / % keep adding to the expression.
 *
 * Otherwise return false and stop adding operators.
 *------------------------------------------------------
 */
bool higherPrecendenceCheck(string top, string cur)
{
  // first case check
  if ((cur.compare("+") == 0) || (cur.compare("-") == 0))
      if ((top.compare("%") == 0) || (top.compare("/") == 0) || (top.compare("*") == 0) ||
	  (top.compare("+") == 0) || (top.compare("-") == 0))
	  return true;

  // second case check
  if ((cur.compare("%") == 0) || (cur.compare("/") == 0) || (cur.compare("*") == 0))
    if ((top.compare("%") == 0) || (top.compare("/") == 0) || (top.compare("*") == 0))
      return true;

  // otherwise return false
  return false;
}

/* ------------------------------------------------------
 * Infix to Postfix function
 *
 * This function loops through all of the characters in infix and turns it into a
 * postfix expression using stacks.
 *
 * Simply put this function checks whether or not the current character is an
 * operator. then checks if is a parenthesis, checks whether it is time to push the
 * operators to the postfix expression from the stack based on precedence, and lastly
 * repeats until all of the characters in the infix expression have been looped through 
 * -------------------------------------------------------
 */
int infixToPostfix(string infix[], int length, string postfix[])
{
  // operatorStack for storing operators during the loop
  stack<string> operatorStack;
  // parenthesisCheck stack for making sure parentheses are valid
  stack<string> parenthesisCheck;

  int curPostfix = 0;
  string curOperator;
  bool parenthesisInvalid = false;
  int numOpenP = 0;
  int numClosedP = 0;
    
  for (int i=0; i<length; i++)
    {
      if(isdigit(infix[i][0]))
	{
	  postfix[curPostfix] = infix[i];
	  curPostfix++;
	}
      else if(infix[i] == "(")
 	{
	  numOpenP++;
	  parenthesisCheck.push("(");
	  operatorStack.push(infix[i]);
	}
      else if(infix[i] == ")")
	{
	  numClosedP++;
	  if (parenthesisCheck.empty() || parenthesisCheck.top() != "(")
	     parenthesisInvalid = true;
	  else
	    parenthesisCheck.pop();
	    
	  while(!operatorStack.empty() && (operatorStack.top() != "("))
	    {
	      postfix[curPostfix] = operatorStack.top();
	      curPostfix++;
	      operatorStack.pop();
	    }
	  if (!operatorStack.empty() && operatorStack.top() == "(")
	    {
	      operatorStack.pop();
	    }
	}
      else
	{
	  while (!operatorStack.empty() && higherPrecendenceCheck(operatorStack.top(), infix[i]) &&
		 operatorStack.top().compare("(") != 0)
	    {
	      postfix[curPostfix] = operatorStack.top();
              curPostfix++;
              operatorStack.pop();
	    }
	  operatorStack.push(infix[i]);
	}
    }
  while (!operatorStack.empty())
    {
      postfix[curPostfix] = operatorStack.top();
      curPostfix++;
      operatorStack.pop();
    }

  if ((numOpenP != numClosedP) || parenthesisInvalid) 
      return 0;

  return curPostfix;
}

//Main function to test infixToPostfix()
//Should convert 2 + 3 * 4 + ( 5 - 6 + 7 ) * 8
//            to 2 3 4 * + 5 6 - 7 + 8 * +
/*
int main()
{
    string infixExp[] = {"2", "+", "3", "*", "4", "+", "(",
                         "5", "-", "6", "*", "7", ")", "*",
                         "8"};
    string postfixExp[15];
    int postfixLength;

    cout << "Infix expression: ";
    for (int i=0; i<15; i++)
    {
        cout << infixExp[i] << " ";
    }
    cout << endl;
    cout << "Length: 15" << endl << endl;

    postfixLength = infixToPostfix(infixExp, 15, postfixExp);

    cout << "Postfix expression: ";
    for (int i=0; i<postfixLength; i++)
    {
        cout << postfixExp[i] << " ";
    }
    cout << endl;
    cout << "Length: " << postfixLength << endl;
    
    return 0;
}
*/
